openapi: 3.0.0
info:
  title: 'E-commerce api project'
  version: '1.0'
paths:
  /login:
    post:
      tags:
        - auth
      summary: 'Handle an incoming authentication request.'
      description: "Endpoint for login,\n    you should first make a request to the /sanctum/csrf-cookie endpoint to initialize CSRF protection for the application"
      operationId: 42f77e072dec84b0e1094cca1228298e
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  description: Email
                  type: string
                password:
                  description: Password
                  type: string
              type: object
              example:
                - '{"email": "test@mail.com", "password": "123456"}'
      responses:
        '204':
          description: 'Successful login'
        '422':
          description: 'These credentials do not match our records'
  /logout:
    post:
      tags:
        - auth
      summary: 'Destroy an authenticated session.'
      description: 'Endpoint for login'
      operationId: 03afb12b342c2ea43bdc1de4f39e91a8
      responses:
        '204':
          description: 'Successful logout'
      security:
        -
          scalar: sanctum
  /register:
    post:
      tags:
        - auth
      summary: 'Handle an incoming registration request.'
      description: "Endpoint for registration,\n    you should first make a request to the /sanctum/csrf-cookie endpoint to initialize CSRF protection for the application"
      operationId: 573de1fed352c1205a32c4d1b9877375
      requestBody:
        content:
          application/json:
            schema:
              properties:
                first_name:
                  description: 'First name'
                  type: string
                last_name:
                  description: 'Last name'
                  type: string
                email:
                  description: Email
                  type: string
                password:
                  description: Password
                  type: string
              type: object
              example:
                - '{"first_name": "Name", "last_name": "Surname", "email": "test@mail.com", "password": "123456"}'
      responses:
        '204':
          description: 'Successful registration'
        '302':
          description: 'Validation failed'
        '422':
          description: 'Email already taken'
  /api/cart:
    get:
      tags:
        - cart
      description: "Returns paginated list of products in logged user's cart,\n    total price of all products in cart, and last page number for pagination purposes"
      operationId: 1cc05750bf9c479c79f8b205f5a8bff4
      parameters:
        -
          name: page
          in: query
          description: 'Number of page for paginated list of products in cart'
          required: true
          allowEmptyValue: false
      responses:
        '200':
          description: OK
      security:
        -
          scalar: sanctum
  /api/cart/add:
    post:
      tags:
        - cart
      description: "Endpoint for adding given amount of chosen product to logged user's cart"
      operationId: 8a051e160148a408fe92e1f8da586aab
      requestBody:
        content:
          application/json:
            schema:
              properties:
                product_id:
                  description: 'ID of product to be added'
                  type: string
                quantity:
                  description: 'Amount of product to add'
                  type: string
              type: object
              example:
                - '{"product_id": "1"}'
                - '{{"product_id": "1", "quantity": "3"}}'
      responses:
        '200':
          description: OK
        '429':
          description: 'The limit of products in the cart has been exceeded'
        '409':
          description: 'Product is out of stock'
        '404':
          description: 'No product with such id'
      security:
        -
          scalar: sanctum
  /api/cart/remove:
    post:
      tags:
        - cart
      description: "Endpoint for removing one piece of product from logged user's cart"
      operationId: cd194a560a0f1cc51d31831c3fad9a7d
      requestBody:
        content:
          application/json:
            schema:
              properties:
                product_id:
                  description: 'ID of product to be removed'
                  type: string
              type: object
              example:
                - '{"product_id": "1"}'
      responses:
        '200':
          description: OK
        '409':
          description: 'No product with such id in cart'
        '404':
          description: 'No product with such id'
      security:
        -
          scalar: sanctum
  /api/catalog:
    get:
      tags:
        - catalog
      description: 'Returns paginated list of products and pagination metadata'
      operationId: bb01d72d9498739e6b5d1e6670e82a1c
      parameters:
        -
          name: page
          in: query
          description: 'Number of page for paginated list of products'
          required: true
          allowEmptyValue: false
        -
          name: category
          in: query
          description: 'ID of the searched category'
          required: false
          allowEmptyValue: true
        -
          name: text
          in: query
          description: 'Name of product to search for'
          required: false
          allowEmptyValue: true
          examples:
            'One word':
              summary: 'Search for a product whose name contains a given word'
              value: product
            'Multiple words':
              summary: "Search for a product whose name contains a given words separated by '_'"
              value: product_1
        -
          name: sort
          in: query
          description: 'Sorting option'
          required: false
          allowEmptyValue: true
          examples:
            Cheap:
              summary: 'Sorts products from cheap to expensive'
              value: cheap
            Expensive:
              summary: 'Sorts products from expensive to cheap'
              value: expensive
            Novelty:
              summary: 'Sorts products by newest'
              value: novelty
      responses:
        '200':
          description: OK
  /api/category:
    get:
      tags:
        - category
      description: ''
      operationId: 333075afb1071bc60ddc37709c6279b5
      parameters:
        -
          name: id
          in: query
          description: 'ID of category'
          required: true
          allowEmptyValue: false
      responses:
        '200':
          description: OK
        '400':
          description: 'No parameters were passed'
        '404':
          description: 'No category with such id'
  /api/category/all:
    get:
      tags:
        - category
      description: 'List of all categories'
      operationId: 25bee80d5c542352be417a29e5028a6a
      responses:
        '200':
          description: OK
  /api/order/create:
    post:
      tags:
        - order
      description: 'Endpoint for creating order for logged user'
      operationId: 48fdd559c958da8e951390249c808a82
      requestBody:
        content:
          application/json:
            schema:
              properties:
                city:
                  description: 'City for products to be delivered to'
                  type: string
                date:
                  description: 'Date of delivery'
                  type: string
              type: object
              example:
                - '{"city": "Kyiv", "date": "2023-07-28"}'
      responses:
        '200':
          description: OK
        '402':
          description: 'Not enough money to buy this products'
        '400':
          description: 'Some of parameters are missing'
      security:
        -
          scalar: sanctum
  /api/order/cancel:
    post:
      tags:
        - order
      description: "Endpoint for cancelling logged user's order"
      operationId: 2e3c26b9746632826ee2b747807662dd
      requestBody:
        content:
          application/json:
            schema:
              properties:
                order_id:
                  description: 'ID of order to be canceled'
                  type: string
              type: object
              example:
                - '{"order_id": "1"}'
      responses:
        '200':
          description: OK
        '404':
          description: 'No order with such id'
        '400':
          description: 'No parameters were passed'
      security:
        -
          scalar: sanctum
  /order/all:
    get:
      tags:
        - order
      description: 'List of paginated orders for logged user'
      operationId: 846dbc187977fb6d5860ec9d747f064e
      parameters:
        -
          name: page
          in: query
          description: 'Number of page for paginated list of products in cart'
          required: true
          allowEmptyValue: false
      responses:
        '200':
          description: OK
      security:
        -
          scalar: sanctum
  /order/getProducts:
    get:
      tags:
        - order
      description: 'List of products in the order of logged user'
      operationId: f3cf0890a25c1a1b9d240f2509804396
      parameters:
        -
          name: order_id
          in: query
          description: 'ID of chosen order'
          required: true
          allowEmptyValue: false
      responses:
        '200':
          description: OK
        '404':
          description: 'No order with such id'
        '400':
          description: 'No parameters were passed'
      security:
        -
          scalar: sanctum
  /api/product:
    get:
      tags:
        - product
      description: 'Returns product with given ID'
      operationId: b8cbbd4f5d5704256a9d8053465fedb3
      parameters:
        -
          name: id
          in: query
          description: 'ID of product'
          required: true
          allowEmptyValue: false
      responses:
        '200':
          description: OK
        '404':
          description: 'No product with such id'
        '400':
          description: 'No parameters were passed'
  /api/user:
    get:
      tags:
        - user
      description: 'Returns currently logged user'
      operationId: 22ea85303059d4f2d15556c1c9fd65d2
      responses:
        '200':
          description: OK
      security:
        -
          scalar: sanctum
  /api/user/pay:
    post:
      tags:
        - user
      description: ''
      operationId: 6c000a19e786dd686e65e4dde2b54e65
      requestBody:
        content:
          application/json:
            schema:
              properties:
                money_amount:
                  description: 'The money amount by which the balance is replenished'
                  type: string
              type: object
              example:
                - '{"money_amount": "10000"}'
      responses:
        '200':
          description: OK
        '400':
          description: 'No parameters were passed'
      security:
        -
          scalar: sanctum
tags:
  -
    name: auth
  -
    name: cart
  -
    name: catalog
  -
    name: category
  -
    name: order
  -
    name: product
  -
    name: user
